<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html on LRG</title>
    <link>https://lrg.io/tags/html/</link>
    <description>Recent content in Html on LRG</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 04 Dec 2024 11:39:00 +0000</lastBuildDate>
    <atom:link href="https://lrg.io/tags/html/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Failing at web components</title>
      <link>https://lrg.io/software/failing-to-make-a-web-component/</link>
      <pubDate>Wed, 04 Dec 2024 11:39:00 +0000</pubDate>
      <guid>https://lrg.io/software/failing-to-make-a-web-component/</guid>
      <description>&lt;p&gt;I think I should know about Web Components™ I have no idea how this is going to work, but I have used Vue &amp;amp; React components in the past. I personally feel like Web Components should be the way forward, but my lazy self has not spent any serious time trying to get to grips with them&lt;/p&gt;&#xA;&lt;p&gt;but here&amp;rsquo;s what I imagine a web component might look like. Absolute pseudo-code. I know nothing.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;// some JS goes in here to make things work&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- some HTML goes in here --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* some scoped CSS go in here */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is probably a reflection of how much time I&amp;rsquo;ve spent in Vue.js recently, but it&amp;rsquo;s &lt;em&gt;conceptually&lt;/em&gt; what I&amp;rsquo;m imagining is required to build something as a Web Component.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tweets as postcards</title>
      <link>https://lrg.io/software/site-build/tweets-as-postcards/</link>
      <pubDate>Wed, 09 Oct 2024 11:55:00 +0000</pubDate>
      <guid>https://lrg.io/software/site-build/tweets-as-postcards/</guid>
      <description>&lt;p&gt;I did an experiment trying to make my old Tweet archive look like  postcards. It&amp;rsquo;s a nice aesthetic if you&amp;rsquo;re on a PC, but less easily readable on mobile. This really needs to be backed out. It will, eventually.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://lrg.io/images/tweet-as-postcard.png&#34; alt=&#34;It’s intended to look like the back of a postcard, with a cute postmarked ’twitter’ stamp&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;I was particularly proud of the &amp;lsquo;smudged&amp;rsquo; postmark on the stamp. All done with CSS :)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Default</title>
      <link>https://lrg.io/software/site-build/book-cover-test/layout-default/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lrg.io/software/site-build/book-cover-test/layout-default/</guid>
      <description>&lt;p&gt;This layout style is inspired by really early penguin classics. It accepts all the theme colours, but doesn&amp;rsquo;t have a place to display an image.&lt;/p&gt;&#xA;&lt;p&gt;If the author is not defined, the layout will display the official Chicken logo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notebook</title>
      <link>https://lrg.io/software/site-build/book-cover-test/layout-notebook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lrg.io/software/site-build/book-cover-test/layout-notebook/</guid>
      <description></description>
    </item>
    <item>
      <title>Vintage</title>
      <link>https://lrg.io/software/site-build/book-cover-test/layout-vintage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lrg.io/software/site-build/book-cover-test/layout-vintage/</guid>
      <description>&lt;p&gt;&lt;code&gt;style: layout-vintage&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Can take quite long headlines, and other text elements. Simple .svg images work really well - especially things like clip art or cartoonos, but bitmap images don&amp;rsquo;t really fit the style very well, and may look squashed if they&amp;rsquo;re not square to match the available space.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;author&lt;/code&gt; attribute will not show&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
